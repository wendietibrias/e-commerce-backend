generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Admin {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  email        String        @unique
  password     String
  role         Role          @default(ADMIN)
  products     Product[]
  categories   Category[]
  ProfileAdmin ProfileAdmin?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model ProfileAdmin {
  id        Int      @id @default(autoincrement())
  phone     String
  birthday  String
  country   String
  city      String
  address   String
  adminId   Int      @unique
  admin     Admin?   @relation(fields: [adminId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([adminId])
}

model Category {
  id        Int       @id @default(autoincrement())
  title     String
  slug      String    @unique
  products  Product[]
  admin     Admin     @relation(fields: [adminId], references: [id])
  adminId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([adminId])
}

model Product {
  id           Int           @id @default(autoincrement())
  title        String
  excerpt      String        @db.Text
  price        Int
  stock        Int
  description  String        @db.LongText
  recommended  Boolean       @default(false)
  archived     Boolean       @default(false)
  rating       Int           @default(0)
  categoryId   Int
  category     Category?     @relation(fields: [categoryId], references: [id])
  productImage ProductImage?
  admin        Admin?        @relation(fields: [adminId], references: [id])
  adminId      Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([categoryId, adminId])
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  publicId  String
  url       String
  type      String
  productId Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Banner {
  id          Int      @id @default(autoincrement())
  title       String
  subtitle    String   @db.LongText
  bannerImage String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id             Int      @id @default(autoincrement())
  name           String   @unique
  email          String   @unique
  password       String
  role           Role     @default(USER)
  orders         Order[]
  isAdmin        Boolean  @default(false)
  email_verified Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Order {
  id            Int           @id @default(autoincrement())
  country       String
  city          String
  address       String
  phone         String
  paymentMethod String
  delivery      String
  detail        String        @db.LongText
  userId        Int
  user          User?         @relation(fields: [userId], references: [id])
  orderDetail   OrderDetail[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([userId])
}

model OrderDetail {
  id           Int      @id @default(autoincrement())
  productTitle String
  productPrice Int
  productImage String
  qty          Int
  total        Int
  orderId      Int
  order        Order?   @relation(fields: [orderId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([orderId])
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}
